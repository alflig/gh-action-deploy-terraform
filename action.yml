name: Plan and Apply Terraform code

description: Github action workflow to plan and apply Terraform code
author: 'alflig'
inputs:
  environment:
    description: 'The environment to deploy to'
    required: true
  tf-storage-account-name:
    required: true
    description: Storage account name
  tf-apply:
    required: true
    description: wether to plan or apply terraform code
  tf-format:
    required: true
    description: wether to format terraform code
    default: "true"
  tf-validate:
    required: true
    description: wether to validate terraform code
    default: "true"
  SUBSCRIPTION_ID:
    required: true
    description: Azure subscription id
  TENANT_ID:
    required: true
    description: Azure tenant id
  APP_ID:
    required: true
    description: Azure app id
  workdir:
    required: false
    description: The working directory to run the terraform commands
    default: terraform-deployments


runs:
  using: 'composite'   
  steps:
    - name: Find version of Terraform to use
      working-directory: ${{ inputs.workdir }}/${{ inputs.environment }}
      shell: bash
      id: tfversion
      run: |
        GET_CURRENT_TF_VERSION=$(grep required_version providers.tf | sort -u | tail -1 | cut -d= -f2- | xargs)
        echo CURRENT_TF_VERSION=$GET_CURRENT_TF_VERSION >> $GITHUB_ENV
    
    - uses: hashicorp/setup-terraform@v3
      with:
          terraform_version: ${{ env.CURRENT_TF_VERSION }}
          terraform_wrapper: true

    - name: TF Format
      working-directory: ${{ inputs.workdir }}/${{ inputs.environment }}
      if: inputs.tf-format == 'true'
      shell: bash
      id: fmt
      run: |
        set -e
        terraform -v
        if ! terraform fmt -check -recursive; then
          echo -e "\033[0;31mError: Terraform fmt failed.\033[0m"
          echo -e "\033[0;31mPlease run the following command to format your Terraform files before pushing your code:\033[0m"
          echo -e "\033[0;33mterraform fmt -recursive\033[0m"
          exit 1
        fi
      
    - name: Terraform Init
      working-directory: ${{ inputs.workdir }}/${{ inputs.environment }}
      env: 
        ARM_SUBSCRIPTION_ID: ${{ inputs.SUBSCRIPTION_ID }}
      shell: bash
      id: init
      run: >
        terraform init
        -input=false
        -backend-config="use_oidc=true"
        -backend-config="container_name=${{ inputs.environment }}"
        -backend-config="key=${{ inputs.environment }}.tfstate"
        -backend-config="storage_account_name=${{ inputs.tf-storage-account-name }}"
        -backend-config="tenant_id=${{ inputs.TENANT_ID }}"
        -backend-config="subscription_id=${{ inputs.SUBSCRIPTION_ID }}"
        -backend-config="client_id=${{ inputs.APP_ID }}"

    - name: Terraform Validate
      if: inputs.tf-validate == 'true'
      working-directory: ${{ inputs.workdir }}/${{ inputs.environment }}
      shell: bash
      id: validate
      run: terraform validate
      
    - name: TF Plan
      working-directory: ${{ inputs.workdir }}/${{ inputs.environment }}
      env: 
        ARM_SUBSCRIPTION_ID: ${{ inputs.SUBSCRIPTION_ID }}
      shell: bash
      id: tfplan
      run: |
        terraform plan -out=${{ inputs.environment }}.tfplan -lock-timeout=3000s
        terraform show -no-color ${{ inputs.environment }}.tfplan > ${{ inputs.environment }}.md
        sed -i -e '1s/^/```diff\n/' -e '$a```' -e 's/~/!/g' -e 's/^[ \t]*//' ${{ inputs.environment }}.md

        echo "**Deployment Environment**: ${{ inputs.environment }}" >> planInfo.md
        echo "**Commit ID:** $(git rev-parse HEAD)" >> planInfo.md
        echo "**Commit Message:** $(git log -1 --pretty=%B)" >> planInfo.md
        cat ${{ inputs.environment }}.md >> planInfo.md
        mv planInfo.md ${{ inputs.environment }}.md

        echo "tfplan=${{ inputs.environment }}.md" >> "$GITHUB_OUTPUT"

    - uses: mshick/add-pr-comment@v2
      if: inputs.tf-apply != 'true'
      with:
        message-id: ${{ inputs.environment }}.md
        message-path: |
         ${{ inputs.workdir }}/${{ inputs.environment }}/${{ inputs.environment }}.md
      
    - name: TF Apply
      working-directory: ${{ inputs.workdir }}/${{ inputs.environment }}
      env: 
        ARM_SUBSCRIPTION_ID: ${{ inputs.SUBSCRIPTION_ID }}
      shell: bash
      if: inputs.tf-apply == 'true'
      id: tfapply
      run: terraform apply -lock-timeout=3000s -auto-approve